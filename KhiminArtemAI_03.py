from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from dotenv import load_dotenv
import os
import shutil
from TerraYolo.TerraYolo import TerraYoloV5   # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ TerraYolo
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# --- 0) ENV / TOKEN / YOLO ----------------------------------------------------
load_dotenv()
TOKEN = os.environ.get("TOKEN")  # –í–ê–ñ–ù–û !!!!!
WORK_DIR = 'D:/UII/DataScience/16_OD/OD'
os.makedirs(WORK_DIR, exist_ok=True)
yolov5 = TerraYoloV5(work_dir=WORK_DIR)

# --- 0.1) –ü—Ä–µ—Å–µ—Ç—ã –∫–ª–∞—Å—Å–æ–≤ COCO –¥–ª—è –∫–Ω–æ–ø–æ–∫ ------------------------------------
# –í–ê–ñ–ù–û: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–Ω–¥–µ–∫—Å–æ–≤ (–±–µ–∑ —Å–∫–æ–±–æ–∫) –∏–ª–∏ None (–≤—Å–µ –∫–ª–∞—Å—Å—ã)
CLASS_PRESETS = {
    # 0 - person
    "person":   ("–õ—é–¥–∏",        "0"),
    # 1 bicycle, 2 car, 3 motorcycle, 5 bus, 7 truck
    "vehicles": ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",   "1 2 3 5 7"),
    # 14 bird, 15 cat, 16 dog, 17 horse, 18 sheep, 19 cow, 20 elephant, 21 bear, 22 zebra, 23 giraffe
    "animals":  ("–ñ–∏–≤–æ—Ç–Ω—ã–µ",    "14 15 16 17 18 19 20 21 22 23"),
    # 9 traffic light, 11 stop sign
    "traffic":  ("–°–≤–µ—Ç–æ—Ñ–æ—Ä—ã/–∑–Ω–∞–∫–∏", "9 11"),
    # None -> –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º (–≤—Å–µ –∫–ª–∞—Å—Å—ã)
    "all":      ("–í—Å–µ –∫–ª–∞—Å—Å—ã (—Å–±—Ä–æ—Å)", None),
}

def build_classes_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–õ—é–¥–∏", callback_data="cls:person"),
            InlineKeyboardButton("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="cls:vehicles"),
        ],
        [
            InlineKeyboardButton("–ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="cls:animals"),
            InlineKeyboardButton("–°–≤–µ—Ç–æ—Ñ–æ—Ä—ã/–∑–Ω–∞–∫–∏", callback_data="cls:traffic"),
        ],
        [
            InlineKeyboardButton("–°–±—Ä–æ—Å (–≤—Å–µ –∫–ª–∞—Å—Å—ã)", callback_data="cls:all"),
        ],
    ])

# --- 1) /start ---------------------------------------------------------------
async def start(update, context):
    user = update.effective_user  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å –∏–º–µ–Ω–µ–º –∏–ª–∏ username)
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n"
    welcome_text += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KhiminArtemAI Bot üöÄ\n\n"

    # –î–∞–ª—å—à–µ –∏–¥—ë—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    main_text = (
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.\n"
        "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ /objects"
    )

    await update.message.reply_text(welcome_text + main_text)


# --- 1.1) –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ ------------------------------------------------
async def objects(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ ¬´–ø–æ –∫–ª–∞—Å—Å–∞–º¬ª:",
        reply_markup=build_classes_keyboard()
    )

async def on_cls(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "cls:person"
    key = data.split(":", 1)[1]

    if key not in CLASS_PRESETS:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç.")
        return

    preset_name, class_str = CLASS_PRESETS[key]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_classes_key']  = key         # 'person' | 'vehicles' | 'animals' | 'traffic' | 'all'
    context.user_data['selected_classes_name'] = preset_name  # —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_classes_str']  = class_str    # '0 2 7' | None

    if class_str is None:
        await query.edit_message_text("–§–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤: —Å–±—Ä–æ—à–µ–Ω (–≤—Å–µ –∫–ª–∞—Å—Å—ã).")
    else:
        await query.edit_message_text(f"–§–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤: {preset_name} (COCO: {class_str}).")

# --- 2) /help –∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç ----------------------------------------------
async def help(update, context):
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º YOLO Bot*\n\n"
        "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/objects ‚Äì –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ª—é–¥–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–≤–æ—Ç–Ω—ã–µ, —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã)\n"
        "/help ‚Äì –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç), "
        "–∏ –±–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤.\n\n"
        "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å *YOLOv5x* –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å:\n"
        " - –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (conf-threshold)\n"
        " - –ü–æ—Ä–æ–≥ IoU –¥–ª—è NMS (iou-threshold)\n"
        " - –ö–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n\n"
        "üîí –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–∫–µ–Ω, –æ–∫—Ä—É–∂–µ–Ω–∏–µ) –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è. "
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ `runs/detect/`."
    )

    await update.message.reply_text(help_text, parse_mode="Markdown")


# --- 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ------------------------------------------------
async def detection(update, context):
    # === –®–ê–ì A. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—á–∏—Å—Ç–∏–º –ø—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã) =============
    try:
        shutil.rmtree('images')
    except Exception:
        pass
    try:
        shutil.rmtree(f'{WORK_DIR}/yolov5/runs')
    except Exception:
        pass

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    my_message = await update.message.reply_text(
        '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç —Ç–µ–±—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤...'
    )

    # === –®–ê–ì B. –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram ============================
    tg_file = None
    image_name = None

    # –°–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ
    if update.message and update.message.photo:
        tg_file = await update.message.photo[-1].get_file()
        image_name = os.path.basename(tg_file.file_path) if tg_file.file_path else 'photo.jpg'

    # –ù–µ—Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª)
    elif update.message and update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith('image/'):
        tg_file = await update.message.document.get_file()
        image_name = update.message.document.file_name or (os.path.basename(tg_file.file_path) if tg_file.file_path else 'document_image.jpg')

    else:
        await context.bot.deleteMessage(message_id=my_message.message_id, chat_id=update.message.chat_id)
        await update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.')
        return

    os.makedirs('images', exist_ok=True)
    image_path = os.path.join('images', image_name)
    await tg_file.download_to_drive(image_path)
    image_name = os.path.basename(image_path)

    # === –®–ê–ì C. –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è YOLO ==========================
    test_dict = dict()
    test_dict['weights'] = 'yolov5x.pt'   # —Å–∏–ª—å–Ω—ã–µ –≤–µ—Å–∞
    test_dict['source']  = 'images'       # –ø–∞–ø–∫–∞ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

    # === –®–ê–ì D1. –ü—Ä–æ–≥–æ–Ω—ã –ø–æ conf (—Ç—Ä–∏ —É—Ä–æ–≤–Ω—è) =================================
    conf_list = [0.01, 0.5, 0.99]
    result_paths_conf = []

    for c in conf_list:
        test_dict['conf-thres'] = c
        run_name = f"conf_{int(c*100):03d}"
        test_dict['name'] = run_name

        out_dir = f"{WORK_DIR}/yolov5/runs/detect/{run_name}"
        if os.path.exists(out_dir):
            shutil.rmtree(out_dir, ignore_errors=True)

        yolov5.run(test_dict, exp_type='test')

        out_path = f"{WORK_DIR}/yolov5/runs/detect/{run_name}/{image_name}"
        if os.path.exists(out_path):
            result_paths_conf.append((c, out_path))

    # === –®–ê–ì D2. –ü—Ä–æ–≥–æ–Ω—ã –ø–æ IoU (—Ç—Ä–∏ —É—Ä–æ–≤–Ω—è) ==================================
    iou_list = [0.01, 0.5, 0.99]
    result_paths_iou = []

    for i in iou_list:
        test_dict['conf-thres'] = 0.25      # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è NMS
        test_dict['iou-thres']  = i
        run_name = f"iou_{int(i*100):03d}"
        test_dict['name'] = run_name

        out_dir = f"{WORK_DIR}/yolov5/runs/detect/{run_name}"
        if os.path.exists(out_dir):
            shutil.rmtree(out_dir, ignore_errors=True)

        yolov5.run(test_dict, exp_type='test')

        out_path = f"{WORK_DIR}/yolov5/runs/detect/{run_name}/{image_name}"
        if os.path.exists(out_path):
            result_paths_iou.append((i, out_path))

    # === –®–ê–ì D3. –ü—Ä–æ–≥–æ–Ω –ø–æ –∫–ª–∞—Å—Å–∞–º (—Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞) ==============
    # –ß–∏—Ç–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî "–õ—é–¥–∏"
    selected_key  = context.user_data.get('selected_classes_key', 'person')
    selected_name = context.user_data.get('selected_classes_name', CLASS_PRESETS['person'][0])
    selected_str  = context.user_data.get('selected_classes_str', CLASS_PRESETS['person'][1])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è "–∫–ª–∞—Å—Å–æ–≤–æ–≥–æ" –ø—Ä–æ–≥–æ–Ω–∞
    test_dict['conf-thres'] = 0.5
    test_dict['iou-thres']  = 0.45
    run_name_classes = f"classes_{selected_key}"
    test_dict['name'] = run_name_classes

    # –í–ê–ñ–ù–û: test_dict['classes'] —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä (–Ω–µ None)
    if selected_str is not None:
        test_dict['classes'] = selected_str  # —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "0 2 7"
    elif 'classes' in test_dict:
        del test_dict['classes']

    out_dir = f"{WORK_DIR}/yolov5/runs/detect/{run_name_classes}"
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir, ignore_errors=True)

    yolov5.run(test_dict, exp_type='test')
    out_path_classes = f"{WORK_DIR}/yolov5/runs/detect/{run_name_classes}/{image_name}"

    # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —É–±–∏—Ä–∞–µ–º 'classes', —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –±—É–¥—É—â–∏–µ –ø—Ä–æ–≥–∏
    if 'classes' in test_dict:
        del test_dict['classes']

    # === –®–ê–ì E. –£–±–∏—Ä–∞–µ–º "–∏–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ..." ===============================
    await context.bot.deleteMessage(message_id=my_message.message_id, chat_id=update.message.chat_id)

    # === –®–ê–ì F. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ================================
    # 1) conf
    await update.message.reply_text(f"1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ conf = {conf_list}")
    for c, p in result_paths_conf:
        await update.message.reply_text(f"conf = {c}")
        await update.message.reply_photo(p)

    # 2) IoU
    await update.message.reply_text(f"2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –º–µ—Ç—Ä–∏–∫–∏ ‚Äú–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ-–Ω–∞-–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ‚Äù iou = {iou_list}")
    for i, p in result_paths_iou:
        await update.message.reply_text(f"IoU = {i}")
        await update.message.reply_photo(p)

    # 3) –ö–ª–∞—Å—Å—ã (—Å —É—á—ë—Ç–æ–º –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–∑ /objects)
    if selected_str is None:
        await update.message.reply_text(
            "3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º: –≤—Å–µ –∫–ª–∞—Å—Å—ã (—Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á—ë–Ω)."
        )
    else:
        await update.message.reply_text(
            f"3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–∞–º: {selected_name} (COCO: {selected_str})."
        )
    if os.path.exists(out_path_classes):
        await update.message.reply_photo(out_path_classes)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ ¬´–ø–æ –∫–ª–∞—Å—Å–∞–º¬ª.")


# --- 4) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------------------------------------------------
def main():
    application = Application.builder().token(TOKEN).build()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("objects", objects))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (callback)
    application.add_handler(CallbackQueryHandler(on_cls, pattern=r"^cls:"))

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ—Å–∂–∞—Ç—ã–µ (–¥–æ–∫—É–º–µ–Ω—Ç image/*) + —Å–∂–∞—Ç—ã–µ (photo)
    application.add_handler(MessageHandler(filters.Document.IMAGE, detection, block=False))
    application.add_handler(MessageHandler(filters.PHOTO, detection, block=False))

    # –¢–µ–∫—Å—Ç
    application.add_handler(MessageHandler(filters.TEXT, help))

    application.run_polling()  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ CTRL + C


if __name__ == "__main__":
    main()

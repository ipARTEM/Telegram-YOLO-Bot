from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
import io
import shutil
import hashlib
import asyncio
from typing import Dict, List, Optional, Tuple
from TerraYolo.TerraYolo import TerraYoloV5   # —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ TerraYolo

from telegram import BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeAllGroupChats, BotCommandScopeDefault


# === 0) ENV / TOKEN / YOLO ===================================================
load_dotenv()
TOKEN = os.environ.get("TOKEN")  # –í–ê–ñ–ù–û !!!!!  —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

WORK_DIR = 'D:/UII/DataScience/16_OD/OD'
os.makedirs(WORK_DIR, exist_ok=True)

yolov5 = TerraYoloV5(work_dir=WORK_DIR)  # —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∏ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ Telegram id) -----------------------------
ADMIN_USER_IDS = {
    # –ø—Ä–∏–º–µ—Ä: 123456789
}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´–¥–æ–ª–≥–∏—Ö¬ª –∑–∞–¥–∞—á ------------------------------------------------
DETECT_TIMEOUT_SEC = 180         # —Ç–∞–π–º-–∞—É—Ç –Ω–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É YOLO
CACHE_MAX_ITEMS = 200            # –º–∞–∫—Å–∏–º—É–º –∫–ª—é—á–µ–π –≤ –∫–µ—à-–∏–Ω–¥–µ–∫—Å–µ
CACHE_DIR = os.path.join(WORK_DIR, "cache")
os.makedirs(CACHE_DIR, exist_ok=True)

# --- –ü—Ä–µ—Å–µ—Ç—ã –∫–ª–∞—Å—Å–æ–≤ COCO –¥–ª—è –∫–Ω–æ–ø–æ–∫ -----------------------------------------
# –ó–Ω–∞—á–µ–Ω–∏–µ: str –∏–Ω–¥–µ–∫—Å–æ–≤ ("0 1 2") –∏–ª–∏ None (–≤—Å–µ –∫–ª–∞—Å—Å—ã)
CLASS_PRESETS = {
    "person":   ("–õ—é–¥–∏",              "0"),
    "vehicles": ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",         "1 2 3 5 7"),
    "animals":  ("–ñ–∏–≤–æ—Ç–Ω—ã–µ",          "14 15 16 17 18 19 20 21 22 23"),
    "traffic":  ("–°–≤–µ—Ç–æ—Ñ–æ—Ä—ã/–∑–Ω–∞–∫–∏",   "9 11"),
    "all":      ("–í—Å–µ –∫–ª–∞—Å—Å—ã (—Å–±—Ä–æ—Å)", None),
}

def build_classes_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–õ—é–¥–∏", callback_data="cls:person"),
            InlineKeyboardButton("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="cls:vehicles"),
        ],
        [
            InlineKeyboardButton("–ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="cls:animals"),
            InlineKeyboardButton("–°–≤–µ—Ç–æ—Ñ–æ—Ä—ã/–∑–Ω–∞–∫–∏", callback_data="cls:traffic"),
        ],
        [
            InlineKeyboardButton("–°–±—Ä–æ—Å (–≤—Å–µ –∫–ª–∞—Å—Å—ã)", callback_data="cls:all"),
        ],
    ])

# === 0.5) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===========================================
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_USER_IDS

def safe_basename(path: str) -> str:
    return os.path.basename(path).replace("\\", "/").split("/")[-1]

# === 0.6) –°–µ–º–∞—Ñ–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑ =========================
_user_locks: Dict[int, asyncio.Lock] = {}

def get_user_lock(user_id: int) -> asyncio.Lock:
    if user_id not in _user_locks:
        _user_locks[user_id] = asyncio.Lock()
    return _user_locks[user_id]

# === 0.7) –°–µ—Ä–≤–∏—Å –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å –∫–µ—à–µ–º (–û–û–ü) ======================================
class DetectionService:
    """
    –ö–ª–∞—Å—Å –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è:
      - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ YOLO
      - –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —Ö–µ—à—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
      - –∑–∞–ø—É—Å–∫ TerraYoloV5 –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—É—Ç–µ–π –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    """
    def __init__(self,
                 work_dir: str,
                 cache_dir: str,
                 yolov5_obj: TerraYoloV5,
                 cache_max_items: int = 200):
        self.work_dir = work_dir
        self.cache_dir = cache_dir
        self.yolov5 = yolov5_obj
        self.cache_index: List[str] = []  # LRU-—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
        self.cache_max_items = cache_max_items

    # ---------- –•–µ—à –∫–ª—é—á–∞ –∫–µ—à–∞ ----------
    def _calc_cache_key(self,
                        image_bytes: bytes,
                        mode: str,
                        weights: str,
                        conf: float,
                        iou: float,
                        classes_str: Optional[str]) -> str:
        h = hashlib.sha256()
        h.update(image_bytes)
        payload = f"|mode={mode}|weights={weights}|conf={conf}|iou={iou}|classes={classes_str or 'ALL'}|"
        h.update(payload.encode('utf-8'))
        return h.hexdigest()

    # ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ ----------
    def _cache_paths(self, cache_key: str) -> List[str]:
        folder = os.path.join(self.cache_dir, cache_key)
        if not os.path.isdir(folder):
            return []
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ –∫–µ—à–∞
        return [os.path.join(folder, f) for f in sorted(os.listdir(folder))
                if f.lower().endswith((".jpg", ".jpeg", ".png", ".bmp"))]

    # ---------- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–µ—à ----------
    def _save_to_cache(self, cache_key: str, result_paths: List[str]) -> List[str]:
        folder = os.path.join(self.cache_dir, cache_key)
        os.makedirs(folder, exist_ok=True)
        out_paths = []
        for i, src in enumerate(result_paths, 1):
            if not os.path.isfile(src):
                continue
            dst = os.path.join(folder, f"result_{i}_{safe_basename(src)}")
            try:
                shutil.copy2(src, dst)
                out_paths.append(dst)
            except Exception:
                pass
        # –æ–±–Ω–æ–≤–ª—è–µ–º LRU
        if cache_key in self.cache_index:
            self.cache_index.remove(cache_key)
        self.cache_index.insert(0, cache_key)
        # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä–æ–µ
        while len(self.cache_index) > self.cache_max_items:
            old_key = self.cache_index.pop()
            shutil.rmtree(os.path.join(self.cache_dir, old_key), ignore_errors=True)
        return out_paths

    # ---------- –ó–∞–ø—É—Å–∫ YOLO —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ----------
    async def run_detection(self,
                            image_path: str,
                            image_bytes: bytes,
                            mode: str,  # "fast" | "pro"
                            selected_classes_str: Optional[str]) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        weights = 'yolov5x.pt'

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        conf_base = 0.5
        iou_base  = 0.45

        # –ö–ª—é—á –∫–µ—à–∞ –¥–ª—è ¬´–±—ã—Å—Ç—Ä–æ–≥–æ¬ª —Ä–µ–∂–∏–º–∞
        cache_key = self._calc_cache_key(
            image_bytes=image_bytes,
            mode=mode,
            weights=weights,
            conf=conf_base,
            iou=iou_base,
            classes_str=selected_classes_str
        )

        # 1) –ü—Ä–æ–±—É–µ–º –∫–µ—à
        cached = self._cache_paths(cache_key)
        if cached:
            return cached

        # 2) –ì–æ—Ç–æ–≤–∏–º –æ–±—â—É—é –≤—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è TerraYolo
        images_dir = os.path.join(self.work_dir, "images_in")
        shutil.rmtree(images_dir, ignore_errors=True)
        os.makedirs(images_dir, exist_ok=True)
        local_name = safe_basename(image_path)
        local_path = os.path.join(images_dir, local_name)
        shutil.copy2(image_path, local_path)

        # –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        test_dict = {
            'weights': weights,
            'source': images_dir,
        }

        result_paths: List[str] = []

        async def _run_once(name: str,
                            conf: float,
                            iou: float,
                            classes: Optional[str]) -> Optional[str]:
            test_dict['name'] = name
            test_dict['conf-thres'] = conf
            test_dict['iou-thres'] = iou

            if classes is not None:
                test_dict['classes'] = classes
            elif 'classes' in test_dict:
                del test_dict['classes']

            # —á–∏—Å—Ç–∏–º –≤—ã—Ö–æ–¥
            out_dir = os.path.join(self.work_dir, "yolov5", "runs", "detect", name)
            shutil.rmtree(out_dir, ignore_errors=True)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
            await asyncio.wait_for(asyncio.to_thread(self.yolov5.run, test_dict, 'test'),
                                   timeout=DETECT_TIMEOUT_SEC)

            out_img = os.path.join(out_dir, local_name)
            return out_img if os.path.exists(out_img) else None

        # 3) –†–µ–∂–∏–º—ã
        if mode == "fast":
            out = await _run_once("fast_single", conf_base, iou_base, selected_classes_str)
            if out:
                result_paths.append(out)

        elif mode == "pro":
            # a) –ì—Ä–∏–¥ –ø–æ conf
            for c in (0.01, 0.50, 0.99):
                out = await _run_once(f"conf_{int(c*100):03d}", c, iou_base, selected_classes_str)
                if out:
                    result_paths.append(out)
            # b) –ì—Ä–∏–¥ –ø–æ IoU (—Ñ–∏–∫—Å–∏—Ä—É–µ–º conf)
            for i in (0.01, 0.50, 0.99):
                out = await _run_once(f"iou_{int(i*100):03d}", conf_base, i, selected_classes_str)
                if out:
                    result_paths.append(out)

        # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à ¬´–ø–æ–¥ –∫–ª—é—á fast¬ª (–≤ —Ç.—á. –¥–ª—è pro ‚Äî –∫–µ—à–∏—Ä—É–µ–º –≤–µ—Å—å –ø–∞–∫–µ—Ç)
        if result_paths:
            return self._save_to_cache(cache_key, result_paths)
        return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
detector = DetectionService(WORK_DIR, CACHE_DIR, yolov5, CACHE_MAX_ITEMS)

# === 1) /start ===============================================================
async def start(update, context):
    user = update.effective_user
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YOLOv5 Bot üöÄ\n\n"
    main_text = (
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.\n"
        "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /objects\n"
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ‚Äî /help"
    )
    await update.message.reply_text(welcome_text + main_text)

# === 1.1) –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ ======================================================
async def objects(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ ¬´–ø–æ –∫–ª–∞—Å—Å–∞–º¬ª:",
        reply_markup=build_classes_keyboard()
    )

async def on_cls(update, context):
    query = update.callback_query
    await query.answer()
    key = query.data.split(":", 1)[1]
    if key not in CLASS_PRESETS:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç.")
        return

    preset_name, class_str = CLASS_PRESETS[key]
    context.user_data['selected_classes_key']  = key
    context.user_data['selected_classes_name'] = preset_name
    context.user_data['selected_classes_str']  = class_str

    if class_str is None:
        await query.edit_message_text("–§–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤: —Å–±—Ä–æ—à–µ–Ω (–≤—Å–µ –∫–ª–∞—Å—Å—ã).")
    else:
        await query.edit_message_text(f"–§–∏–ª—å—Ç—Ä –∫–ª–∞—Å—Å–æ–≤: {preset_name} (COCO: {class_str}).")

# === 2) /help =================================================================
async def help(update, context):
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º KhiminArtem Bot*\n\n"
        "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/objects ‚Äì –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ª—é–¥–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–≤–æ—Ç–Ω—ã–µ, —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã)\n"
        "/help ‚Äì –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
        "/mode ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (fast/pro)\n"
        "/fast ‚Äì –í–∫–ª—é—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω)\n"
        "/pro ‚Äì –¢—è–∂—ë–ª—ã–π —Ä–µ–∂–∏–º (–≥—Ä–∏–¥ –ø–æ conf –∏ IoU, *—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω*)\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) ‚Äî –±–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ YOLOv5.\n\n"
        "‚öôÔ∏è –ú–æ–¥–µ–ª—å: *YOLOv5x*. –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        " - conf-threshold (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏)\n"
        " - IoU-threshold –¥–ª—è NMS\n"
        " - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º COCO\n\n"
        "üíæ –í—Å—Ç—Ä–æ–µ–Ω –∫–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ö–µ—à—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n"
        "üîí –¢—è–∂—ë–ª—ã–µ —Ä–µ–∂–∏–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# === 2.1) –†–µ–∂–∏–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===============================================
async def show_mode(update, context):
    # fast/pro —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ user_data['mode']; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é fast
    mode = context.user_data.get('mode', 'fast')
    role = "admin" if is_admin(update.effective_user.id) else "user"
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{mode}* (—Ä–æ–ª—å: {role})", parse_mode="Markdown")

async def set_fast(update, context):
    context.user_data['mode'] = 'fast'
    await update.message.reply_text("–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *fast* (–±—ã—Å—Ç—Ä—ã–π –æ–¥–Ω–æ–ø—Ä–æ—Ö–æ–¥–Ω—ã–π).", parse_mode="Markdown")

async def set_pro(update, context):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    context.user_data['mode'] = 'pro'
    await update.message.reply_text("–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *pro* (—Ç—è–∂—ë–ª—ã–π, –≥—Ä–∏–¥ –ø–æ conf/IoU).", parse_mode="Markdown")

# === 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å –∫–µ—à–µ–º/–ª–∏–º–∏—Ç–∞–º–∏) =============================
async def detection(update, context):
    user = update.effective_user
    lock = get_user_lock(user.id)

    if lock.locked():
        await update.message.reply_text("‚è≥ –£ –≤–∞—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    async with lock:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
        tg_file = None
        image_name = None

        if update.message and update.message.photo:
            tg_file = await update.message.photo[-1].get_file()
            image_name = safe_basename(tg_file.file_path) if tg_file.file_path else 'photo.jpg'
        elif update.message and update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith('image/'):
            tg_file = await update.message.document.get_file()
            image_name = update.message.document.file_name or (safe_basename(tg_file.file_path) if tg_file.file_path else 'document_image.jpg')
        else:
            await update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.')
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é tmp-–ø–∞–ø–∫—É
        tmp_dir = os.path.join(WORK_DIR, "tmp_in")
        shutil.rmtree(tmp_dir, ignore_errors=True)
        os.makedirs(tmp_dir, exist_ok=True)
        image_path = os.path.join(tmp_dir, image_name)
        await tg_file.download_to_drive(image_path)

        # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –¥–ª—è —Ö–µ—à–∞
        with open(image_path, "rb") as f:
            image_bytes = f.read()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_str = context.user_data.get('selected_classes_str', CLASS_PRESETS['person'][1])
        mode = context.user_data.get('mode', 'fast')
        if mode == 'pro' and not is_admin(user.id):
            mode = 'fast'  # –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç pro

        # –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        processing_msg = await update.message.reply_text("üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è—é –∫–µ—à‚Ä¶")

        try:
            # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            results = await detector.run_detection(
                image_path=image_path,
                image_bytes=image_bytes,
                mode=mode,
                selected_classes_str=selected_str
            )
        except asyncio.TimeoutError:
            await processing_msg.edit_text("‚ùå –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fast).")
            return
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not results:
            await processing_msg.edit_text("–ì–æ—Ç–æ–≤–æ. –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
            return

        await processing_msg.edit_text(f"–ì–æ—Ç–æ–≤–æ. –†–µ–∂–∏–º: *{mode}*. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶", parse_mode="Markdown")
        for p in results:
            await update.message.reply_photo(p)




# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–æ–º–∞–Ω–¥ (–º–µ–Ω—é /) ====================================
async def _setup_commands(app):
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –õ–ò–ß–ù–´–• —á–∞—Ç–æ–≤ (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    private_commands = [
        BotCommand("start",  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand("help",   "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"),
        BotCommand("objects","–í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–ª–∞—Å—Å—ã COCO)"),
        BotCommand("mode",   "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (fast/pro)"),
        BotCommand("fast",   "–í–∫–ª—é—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º"),
        BotCommand("pro",    "–í–∫–ª—é—á–∏—Ç—å —Ç—è–∂—ë–ª—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
    ]
    await app.bot.set_my_commands(private_commands, scope=BotCommandScopeAllPrivateChats())

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ì–†–£–ü–ü (–æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ)
    group_commands = [
        BotCommand("start",  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand("help",   "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("objects","–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"),
        BotCommand("mode",   "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º"),
    ]
    await app.bot.set_my_commands(group_commands, scope=BotCommandScopeAllGroupChats())

    # –ë–∞–∑–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await app.bot.set_my_commands(private_commands, scope=BotCommandScopeDefault())


def main():
    application = (
        Application.builder()
        .token(TOKEN)
        .post_init(_setup_commands)   # <-- –í–ê–ñ–ù–û: –∑–¥–µ—Å—å, –Ω–∞ builder
        .build()
    )
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("objects", objects))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("mode", show_mode))
    application.add_handler(CommandHandler("fast", set_fast))
    application.add_handler(CommandHandler("pro", set_pro))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (callback)
    application.add_handler(CallbackQueryHandler(on_cls, pattern=r"^cls:"))

    # –ú–µ–¥–∏–∞
    application.add_handler(MessageHandler(filters.Document.IMAGE, detection, block=False))
    application.add_handler(MessageHandler(filters.PHOTO, detection, block=False))

    # –¢–µ–∫—Å—Ç (–ª—É—á—à–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã /help –Ω–µ –ª–æ–≤–∏–ª—Å—è –µ—â—ë –∏ —ç—Ç–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, help))

    application.run_polling()



if __name__ == "__main__":
    main()
